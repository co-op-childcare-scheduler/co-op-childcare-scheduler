{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["debounce","func","wait","immediate","timeout","context","this","args","arguments","later","apply","callNow","clearTimeout","setTimeout","_getDateString","newDate","Date","getTime","getTimezoneOffset","toISOString","split","_expandDateRange","startDate","endDate","year","getFullYear","numDays","foundDates","i","valueOf","setDate","getDate","setFullYear","push","parseDateLine","dateLine","dateRange","length","_parseDateRange","trim","e","App","useState","scheduleInput","setScheduleInput","output","chosenUsers","outputLines","Object","keys","sort","dt","join","formatChosenUsers","usersByDates","userPriority","definedDates","allDates","dateUsers","minUser","user","chooseUsersForDates","dates_by_user","user_by_dates","Set","add","parseUsersByDates","rawInput","current_user","l","startsWith","substr","currentDates","concat","cd","parseDatesByUsers","InputEditor","placeholder","mode","theme","name","fontSize","showPrintMargin","showGutter","highlightActiveLine","value","setOptions","showLineNumbers","tabSize","onChange","newInput","height","OutputEditor","readOnly","wrapEnabled","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.679a32ef.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport AceEditor from \"react-ace\";\nimport \"./App.css\";\n\nimport \"ace-builds/src-noconflict/mode-markdown\";\nimport \"ace-builds/src-noconflict/theme-terminal\";\n\nfunction debounce(func, wait, immediate) {\n\tvar timeout;\n\treturn function() {\n\t\tvar context = this, args = arguments;\n\t\tvar later = function() {\n\t\t\ttimeout = null;\n\t\t\tif (!immediate) func.apply(context, args);\n\t\t};\n\t\tvar callNow = immediate && !timeout;\n\t\tclearTimeout(timeout);\n\t\ttimeout = setTimeout(later, wait);\n\t\tif (callNow) func.apply(context, args);\n\t};\n};\n\nfunction _getDateString(newDate) {\n  let dateString = new Date(\n    newDate.getTime() - newDate.getTimezoneOffset() * 60000\n  )\n    .toISOString()\n    .split(\"T\")[0];\n  return dateString;\n}\n\nfunction _expandDateRange(startDate, endDate) {\n  let year = new Date().getFullYear();\n  let oneDay = 1000 * 60 * 60 * 24;\n  let numDays = (new Date(endDate) - new Date(startDate)) / oneDay;\n  let foundDates = [];\n  for (let i = 0; i <= numDays; i++) {\n    let newDate = new Date(startDate.valueOf());\n    newDate.setDate(newDate.getDate() + i);\n    if(newDate.getFullYear() < year) {\n      newDate.setFullYear(year);\n    }\n    foundDates.push(_getDateString(newDate));\n  }\n  return foundDates;\n}\n\nfunction _parseDateRange(dateRange) {\n  let startDate = dateRange[0];\n  let endDate = dateRange[1];\n  return _expandDateRange(startDate, endDate);\n}\n\nfunction parseDateLine(dateLine) {\n  let dateRange = dateLine.split(\" to \");\n  if (dateRange.length >= 2) {\n    return _parseDateRange(dateRange);\n  } else if (dateLine.trim() === \"\") {\n    return [];\n  }\n  try {\n    return [_getDateString(new Date(dateLine))];\n  } catch (e) {\n    return [];\n  }\n}\n\nfunction parseDatesByUsers(rawInput) {\n  let dates_by_user = {};\n  let current_user = null;\n  let allDates = new Set();\n  for (let l of rawInput.split(\"\\n\")) {\n    if (l.trim().startsWith(\"#\")) {\n      current_user = l.substr(1, l.length).trim();\n      continue;\n    }\n    let currentDates = (dates_by_user[current_user] || []).concat(\n      parseDateLine(l)\n    );\n    for (let cd of currentDates) {\n      allDates.add(cd);\n    }\n    dates_by_user[current_user] = currentDates;\n  }\n\n  return dates_by_user;\n}\n\nfunction parseUsersByDates(dates_by_user) {\n  let user_by_dates = {};\n  for (let user of Object.keys(dates_by_user)) {\n    for (let dt of dates_by_user[user]) {\n      user_by_dates[dt] = (user_by_dates[dt] || new Set()).add(user);\n    }\n  }\n  return user_by_dates;\n}\n\nfunction chooseUsersForDates(usersByDates) {\n  let userPriority = {};\n  let chosenUsers = {};\n  let definedDates = Object.keys(usersByDates).sort();\n  let minDate = definedDates[0];\n  let maxDate = definedDates[definedDates.length - 1];\n  let allDates = _expandDateRange(minDate, maxDate);\n  for (let dt of allDates) {\n    chosenUsers[dt] = null;\n  }\n  for (let dt of definedDates) {\n    let dateUsers = usersByDates[dt];\n    let minUser = null;\n    for (let user of dateUsers) {\n      if (minUser === null || userPriority[user] < userPriority[minUser]) {\n        minUser = user;\n      }\n    }\n    chosenUsers[dt] = minUser;\n    userPriority[minUser] = (userPriority[minUser] || 0) + 1;\n  }\n  return chosenUsers;\n}\n\nfunction formatChosenUsers(chosenUsers) {\n  let outputLines = [];\n  for (let dt of Object.keys(chosenUsers).sort()) {\n    outputLines.push(dt + \"\\t\" + (chosenUsers[dt] || \"UNSPECIFIED\"));\n  }\n  return outputLines.join(\"\\n\");\n}\n\nfunction App() {\n  const [scheduleInput, setScheduleInput] = useState(`\\\n# Xinli\n2020-01-01\n2020-01-03\n01-08 to 01-11\n01-13 to 01-15\n# Ahmad\n2020-01-25 to 2020-01-31\n# Frank\n01-02 to 01-05\n01-10 to 01-15\n# Karen\n01-15 to 01-20\n2020-02-01 to 2020-02-10\n# George\n01-20 to 01-25\n# Tam\n2020-01-06\n2020-01-07\n2020-02-01 to 2020-02-10`);\n\n  let datesByUser = parseDatesByUsers(scheduleInput);\n  let usersByDates = parseUsersByDates(datesByUser);\n  let chosenUsers = chooseUsersForDates(usersByDates);\n  let output = formatChosenUsers(chosenUsers);\n\n  const InputEditor = (\n    <AceEditor\n      placeholder=\"Placeholder Text\"\n      mode=\"markdown\"\n      theme=\"terminal\"\n      name=\"blah2\"\n      fontSize={14}\n      showPrintMargin={true}\n      showGutter={true}\n      highlightActiveLine={true}\n      value={scheduleInput}\n      setOptions={{\n        showLineNumbers: true,\n        tabSize: 2\n      }}\n      onChange={debounce((newInput) => setScheduleInput(newInput), 500)}\n      height=\"40vh\"\n    />\n  );\n  const OutputEditor = (\n    <AceEditor\n      mode=\"markdown\"\n      theme=\"terminal\"\n      name=\"blah2\"\n      fontSize={14}\n      showPrintMargin={true}\n      showGutter={true}\n      highlightActiveLine={true}\n      value={output}\n      setOptions={{\n        showLineNumbers: false,\n        tabSize: 2\n      }}\n      height=\"40vh\"\n      readOnly={true}\n    />\n  );\n\n  const InstructionEditor = (\n    <AceEditor\n      mode=\"markdown\"\n      theme=\"terminal\"\n      name=\"blah2\"\n      fontSize={14}\n      showPrintMargin={true}\n      showGutter={false}\n      highlightActiveLine={true}\n      value={`\\\n  Input the dates that you are available underneath \"Available Dates\".\n  Dates you are assigned to work will be available in the output.\n`}\n      setOptions={{\n        showLineNumbers: false,\n        tabSize: 2\n      }}\n      height=\"80vh\"\n      readOnly={true}\n      wrapEnabled={true}\n    />\n  );\n\n  return (\n    <div className=\"App\">\n      <h1>Co-op Childcare Scheduler</h1>\n      <div className=\"calendars\">\n        <div className=\"calendar-io\">\n          <div className=\"calendar-row\">\n            <div className=\"calendar-pair\">\n              <h2 className=\"calendar-label\">Available Dates</h2>\n              <div className=\"calendar-editor\">{InputEditor}</div>\n            </div>\n          </div>\n          <div className=\"calendar-row\">\n            <div className=\"calendar-pair\">\n              <h2 className=\"calendar-label\">Assignment</h2>\n              <div className=\"calendar-editor\">{OutputEditor}</div>\n            </div>\n          </div>\n        </div>\n        {/* <div className=\"calendar-instruction\">\n          <h2>Instructions</h2>\n            {InstructionEditor}\n        </div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}